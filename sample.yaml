rules:
  - id: com.ubiregi.delete_all
    pattern:
      - delete_all
      - update_all
    message:
      - delete_all や update_all は callback や validation をスキップします
      - レコードを一つずつ destroy/update するよりも高速ですが、危険なことがあります
    justification:
      - 一件ずつ destroy/update すると時間がかかりすぎる場合
      - callback が不要な場合
      - validation をスキップしても、不正な状況にならない場合
    before:
      - records.delete_all
      - "records.update_all(people_id: nil)"
    after:
      - records.each(&:destroy)
  - id: com.ubiregi.save_not_conditional
    pattern:
      - "save() [!conditional]"
      - "update(!validate: false) [!conditional]"
      - "update_attributes(!validate: false) [!conditional]"
    message:
      save や update は失敗した場合に false を返します。
      失敗したかどうかテストして、失敗した場合の処理を実装してください。
    justification:
      - 失敗から回復する方法がない場合
  - id: com.ubiregi.without_validation
    pattern:
      - "save(validate: false)"
      - "save!(validate: false)"
      - "update(validate: false)"
      - "update!(validate: false)"
      - "update_attributes(validate: false)"
      - "update_attributes!(validate: false)"
      - update_attribute
    message:
      - これらのメソッドは validation をスキップします
    justification:
      - validation をスキップしても、不正な状況にならない場合
  - id: com.ubiregi.net_http
    pattern: Net::HTTP
    message:
      - Net::HTTP ではなく HTTPClient などのより安全で高機能なライブラリを使ってください
    before:
      - Net::HTTP.get(url)
    after:
      - HTTPClient.new.get(url)
  - id: com.ubiregi.root_url_without_locale
    pattern: "root_url(!locale: _)"
    message:
      - root_url には locale を指定してください
    before: root_url()
    after: "root_url(locale: I18n.locale)"
  - id: com.ubiregi.transaction
    pattern: transaction
    message:
      - トランザクションを開始する際には、レコードのロックが必要かどうか確認してください
      - with_account_lock や with_menu_lock などのヘルパが利用できないか、検討してください
    justification:
      - ヘルパを定義する場合
      - ロックが不要な場合
    before:
      - transaction do something end
    after:
      - with_account_lock(account) do something end
  - id: com.sideci.oj
    pattern:
      - JSON.load
      - JSON.dump
    message: Oj を使ってください
  - id: com.sideci.meta
    pattern:
      - classify
      - constantize
      - eval
      - instance_values
      - safe_constantize
    message:
      - 本当にメタプログラミングが必要か、三回考え直してください
      - ほとんどの場合は、より読みやすいコードで記述することができます
  - id: activesupport.try
    pattern: "try(:symbol:, ...)"
    message:
      try はメソッドが定義されていない場合に nil を返します。
      try! を使う必要がないか検討してください。
  - id: activesupport.try_with_block_pass
    pattern: "try(&:symbol:)"
    message:
      シンボルを渡した場合と、同じ結果になります（しかも、シンボルを渡したほうが速い）
  - id: rails.transaction_renew
    pattern: "transaction(requires_new: true)"
    message:
      使っている RDBMS はトランザクションのネストをサポートしていません
